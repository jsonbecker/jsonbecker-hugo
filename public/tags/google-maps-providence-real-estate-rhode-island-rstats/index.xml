<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Google Maps Providence Real Estate Rhode Island Rstats on JSONBecker</title>
    <link>http://www.json.blog/tags/google-maps-providence-real-estate-rhode-island-rstats/index.xml</link>
    <description>Recent content in Google Maps Providence Real Estate Rhode Island Rstats on JSONBecker</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="http://www.json.blog/tags/google-maps-providence-real-estate-rhode-island-rstats/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Providence Real Estate Sales in R</title>
      <link>http://www.json.blog/2012/01/providence-real-estate-sales-in-r</link>
      <pubDate>Mon, 23 Jan 2012 00:00:00 +0000</pubDate>
      
      <guid>http://www.json.blog/2012/01/providence-real-estate-sales-in-r</guid>
      <description>&lt;p&gt;The past few months I&amp;rsquo;ve been learning how to use R. This morning, I decided to try out two first&amp;ndash; importing a table of data that is being read of the web and overlaying location data onto a map.&lt;/p&gt;

&lt;p&gt;With a little bit of Google skills and just enough R know-how I was able to produce this image:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://www.json.blog/img/homesales.png&#34; alt=&#34;Providence Home Sales 9-12-11 to 12-27-11&#34; title=&#34;Providence Home Sales 9-12-11 to 12-27-11&#34; /&gt;&lt;/p&gt;

&lt;p&gt;There were a few things that were kind of tricky for me. First, for sometime I couldn&amp;rsquo;t get latitude and longitude components for the addresses. I figured there was something wrong with the way I was using the *apply class of functions in R. apply() (and the related class of functions lapply, sapply, etc.) are really handy if a bit tricky for beginning R users. This function permits quickly &amp;ldquo;applying&amp;rdquo; a function across multiple elements. Traditionally this is done with a loop, but the apply() functions &amp;ldquo;vectorize&amp;rdquo; this process (R folks always talk about making your code more vectorized which has something to do with the structure of objects in R but is beyond my computer science skills&amp;ndash; essentially, vectorized code runs much faster and more efficiency than loops because of some underlying feature of the language). After playing around with apply, lapply, and sapply, I decided to move back into my &amp;ldquo;old&amp;rdquo; way of thinking and just write a loop:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;latlongroll &amp;lt;- function(address){
  lat &amp;lt;- vector(mode = &amp;quot;numeric&amp;quot;, length = length(address))
  lng &amp;lt;- vector(mode = &amp;quot;numeric&amp;quot;, length = length(address))
  for(i in 1:length(address)){
    latlong &amp;lt;- gGeoCode(address[i])
    lat[i]&amp;lt;-latlong[1]
    lng[i]&amp;lt;-latlong[2]
  }
  return(cbind(lat,lng))
} 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This still didn&amp;rsquo;t work&amp;ndash; I kept on getting a strange out-of-bounds call. So I decided to go down the rabbit hole of regular expressions and try and see if I could clean up my addresses any further (I couldn&amp;rsquo;t). So, now seemed as good a time as any to figure out how to print to the console while a loop is running to keep track of progress and where exactly my function was stopped. This turned out to be a bit tricky because I didn&amp;rsquo;t know you had to include a tricky line, &lt;code&gt;r flush.console()&lt;/code&gt; in order to get the prints to work. When I figured this out I found out my loop was being caught on my 7th element, a perfectly well formed address. When I ran gGeoCode() on that address only it worked fine. So I thought, maybe Google is bouncing me out because I&amp;rsquo;m hitting it too fast? And bingo, the final (working version):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;latlongroll &amp;lt;- function(address){
 lat &amp;lt;- vector(mode = &amp;quot;numeric&amp;quot;, length = length(address))
 lng &amp;lt;- vector(mode = &amp;quot;numeric&amp;quot;, length = length(address))
 for(i in 1:length(address)){
  print(i)
  flush.console()
  latlong &amp;lt;- gGeoCode(address[i])
  lat[i]&amp;lt;-latlong[1]
  lng[i]&amp;lt;-latlong[2]
  Sys.sleep(0.5)
 }
 return(cbind(lat,lng))
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Other than that, the whole process was pretty straight forward. I have to thank Tony Breyal for &lt;a href=&#34;http://stackoverflow.com/questions/3257441/geocoding-in-r-with-google-maps&#34;&gt;posting the functions I used&lt;/a&gt; to get latitude and longitude on &lt;a href=&#34;http://stackoverflow.com/&#34;&gt;Stack Overflow&lt;/a&gt;. Also, I found the &lt;a href=&#34;http://cran.r-project.org/web/packages/RgoogleMaps/vignettes/RgoogleMaps-intro.pdf&#34;&gt;RgoogleMaps vignette&lt;/a&gt; to be very helpful, although I wish it had slightly better explained what was going on in qbbox().&lt;/p&gt;

&lt;p&gt;Finally, my full source for the above:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# Providence Real Estate Transactions over the last 40 days.
# Required Packages
require(&#39;XML&#39;)
require(&#39;RCurl&#39;)
require(&#39;RJSONIO&#39;)
require(&amp;quot;RgoogleMaps&amp;quot;)
# Functions
# Construct URL required to get the Lat and Long from Google Maps
construct.geocode.url &amp;lt;- function(address, return.call = &amp;quot;json&amp;quot;, sensor = &amp;quot;false&amp;quot;   ) {
 root &amp;lt;- &amp;quot;http://maps.google.com/maps/api/geocode/&amp;quot;
 u &amp;lt;- paste(root, return.call, &amp;quot;?address=&amp;quot;, address, &amp;quot;&amp;amp;sensor=&amp;quot;, sensor, sep = &amp;quot;&amp;quot;   )
 return(URLencode(u))
}
# Now that we have the proper Google Maps address, get the resulting latitude     and longitude
gGeoCode &amp;lt;- function(address) {
 u &amp;lt;- construct.geocode.url(address)
 doc &amp;lt;- getURL(u)
 x &amp;lt;- fromJSON(doc,simplify = FALSE)
 lat &amp;lt;- x$results[[1]]$geometry$location$lat
 lng &amp;lt;- x$results[[1]]$geometry$location$lng
 return(c(lat, lng))
}
# Roll through addresses to create lat long
latlongroll &amp;lt;- function(address){
# Initializing the length of a vector dramatically speeds up the code. Far 
# better than reassigning and resizing each time in the loop.
 lat &amp;lt;- vector(mode = &amp;quot;numeric&amp;quot;, length = length(address))
 lng &amp;lt;- vector(mode = &amp;quot;numeric&amp;quot;, length = length(address))
 for(i in 1:length(address)){
# I kept the print in because this function takes a long time to run so I 
# like  to watch its progress.
 print(i)
 flush.console()
# To reduce the calls, I chose to store lat and long locally before 
# separating the two whereas initially I hit Google for each separately
 latlong &amp;lt;- gGeoCode(address[i])
 lat[i]&amp;lt;-latlong[1]
 lng[i]&amp;lt;-latlong[2]
# I&#39;ll have to experiment with the sleep time. I&#39;m certain 0.5 seconds is 
# too long (and this is the bulk of the time spent on the whole code).
 Sys.sleep(0.5)
 }
 return(cbind(lat,lng))
}

# Open to the most recent real estate transactions for Providence on the 
# Projo
site &amp;lt;- &#39;http://www.providencejournal.com/homes/real-estate-transactions/assets/pages/real-estate-transactions-providence.htm&#39;
# Read in the table with the header as variable names.
realestate.table&amp;lt;-readHTMLTable(site,header=T,which=1,stringsAsFactors=F)
# Remove the $ sign before the price
realestate.table$Price &amp;lt;- gsub(&amp;quot;([$]{1})([0-9]+)&amp;quot;, &amp;quot;\\2&amp;quot;, 
                               realestate.table$Price)
# Cast price character as numeric
realestate.table$Price&amp;lt;-as.numeric(realestate.table$Price)
# Cast date string as date type (lowercase %y means 2-digit year, 
# uppercase is 4 digit)
realestate.table$Date &amp;lt;- as.Date(realestate.table$Date,format=&#39;%m/%d/%y&#39;)
# Dummy transactions or title changes have a price of $1, removing those 
# from data set
providence &amp;lt;- subset(realestate.table,Price&amp;gt;1)
# Removing properties that do not have an address that start with a street 
# number
providence &amp;lt;- subset(providence, grepl(&amp;quot;^[0-9]+&amp;quot;, providence$Address))
# Add lat and lng coordinates to each address
providence&amp;lt;-cbind(providence, latlongroll(providence[,3]))
# Calculate boundary lat and long for map
bb &amp;lt;- qbbox(providence$lat, providence$lng)
# Gets a map from Google Maps
map &amp;lt;- GetMap.bbox(bb$lonR, bb$latR, zoom=12, maptype=&amp;quot;mobile&amp;quot;)
# plot the points
PlotOnStaticMap(map,lon=providence$lng,lat=providence$lat)
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>