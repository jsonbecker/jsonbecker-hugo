<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Rstats on JSONBecker</title>
    <link>/tags/rstats/</link>
    <description>Recent content in Rstats on JSONBecker</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 03 Jan 2018 00:00:00 +0000</lastBuildDate>
    
        <atom:link href="/tags/rstats/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Naming Manual Colors with ggplot2</title>
      <link>/2018/01/naming-manual-colors-with-ggplot2/</link>
      <pubDate>Wed, 03 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>/2018/01/naming-manual-colors-with-ggplot2/</guid>
      <description>&lt;p&gt;I have been using &lt;code&gt;ggplot2&lt;/code&gt; for 7 years I think. In all that time, I&amp;rsquo;ve been frustrated that I can never figure out what order to put my color values in for &lt;code&gt;scale_*color*_manual&lt;/code&gt;. Not only is the order mapping seemingly random to me, I know that sometimes if I change something about how I&amp;rsquo;m treating the data, the order switches up.&lt;/p&gt;

&lt;p&gt;Countless hours could have been saved if I knew that this one, in hindsight, obvious thing was possible.&lt;/p&gt;

&lt;p&gt;Whenever using &lt;code&gt;scale_*_manual&lt;/code&gt;, you can directly reference a color using a character vector and then name your &lt;code&gt;value&lt;/code&gt; in the &lt;code&gt;scale_&lt;/code&gt; call like so:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;geom_blah(aes(color = &#39;good&#39;)) +
geom_blah(aes(color = &#39;bad&#39;)) +
scale_blah_manual(values = c(good = &#39;green&#39;, bad = &#39;red&#39;))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Obviously this is a toy example, but holy game changer.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>This Year in My R Code</title>
      <link>/2017/12/this-year-in-my-r-code/</link>
      <pubDate>Sun, 31 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>/2017/12/this-year-in-my-r-code/</guid>
      <description>

&lt;p&gt;Looking back on 2017, there were three major trends in my R code: the end of S4, directly writing to SQL database, and &lt;code&gt;purrr&lt;/code&gt; everywhere.&lt;/p&gt;

&lt;h2 id=&#34;the-end-of-s4&#34;&gt;The End of S4&lt;/h2&gt;

&lt;p&gt;The first package I ever wrote extensively used S4 classes. I wanted to have the security of things like &lt;code&gt;setValidity&lt;/code&gt;. I liked the idea of calling &lt;code&gt;new&lt;/code&gt; as it felt more like class systems I was familiar with from that one semester of Java in college. S4 felt more grown up than S3, more like it was utilizing the advantages of object oriented programming, and less exotic than R6, which in 2014 felt riskier to build with and teach future employees. Using S4 was a mistake from day one and never led to any advantages in the code I wrote.&lt;/p&gt;

&lt;p&gt;So this year, I rewrote that original package. It&amp;rsquo;s internal (and a core function) at my job so I can&amp;rsquo;t share too much, but this was a long time coming. Not only did I clean up a lot of code that was just plain bad (in the way all old code is), but I got rid of S4 in favor of S3 or more functional code wherever possible. Our test coverage is far more complete, the code is far easier to extend without duplication, and it looks far more idiomatic to the standard non-BioConductor R user.&lt;/p&gt;

&lt;p&gt;What&amp;rsquo;s the lesson learned here? From a technical perspective, it would be avoid premature optimization and, of course, that everyone can and wants to throw out old code they revist with greater knowledge and context. But I know those things. What drove me to making the wrong decision here was purely imposter syndrome. I was writing code that had to be run unattended on a regular basis as a part of a product in a new job. I didn&amp;rsquo;t feel up to the task, so I felt working with a new, complex, scary part of R that promised some notion of &amp;ldquo;safety&amp;rdquo; would mean I really knew what I was doing. So my takeaway from walking away from S4 is this: start small, build what you know, have confidence you can solve problems one at a time, and trust yourself.&lt;/p&gt;

&lt;h2 id=&#34;directly-writing-sql&#34;&gt;Directly Writing SQL&lt;/h2&gt;

&lt;p&gt;I use SQL far more than R, but almost entirely as a consumer (e.g. &lt;code&gt;SELECT&lt;/code&gt; only). I&amp;rsquo;ve almost always directly used SQL for my queries into &lt;em&gt;other people&amp;rsquo;s data&lt;/em&gt;, but rarely ventured into the world of &lt;code&gt;INSERT&lt;/code&gt; or &lt;code&gt;UPDATE&lt;/code&gt; directly, preferring to use interfaces like &lt;code&gt;dbWriteTable&lt;/code&gt;. This gets back to imposter syndrome&amp;ndash; there&amp;rsquo;s so little damage that can be done with a &lt;code&gt;SELECT&lt;/code&gt; statement, but writing into databases I don&amp;rsquo;t control means taking on risk and responsiblity.&lt;/p&gt;

&lt;p&gt;This year I said fuck it&amp;ndash; there&amp;rsquo;s a whole lot of work and complexity going on that&amp;rsquo;s entirely related to me not wanting to write &lt;code&gt;INSERT INTO&lt;/code&gt; a PostgreSQL has the amazing &lt;code&gt;ON CONFLICT...&lt;/code&gt;-based &amp;ldquo;upserts&amp;rdquo; now. So I started to write a lot of queries, some of them pretty complex &lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:lateral&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:lateral&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;. R is a great wrapper language, and it&amp;rsquo;s database story is getting even better with the new DBI, odbc, and RPostgres packages. Although it&amp;rsquo;s native table writing support is a little weak, there&amp;rsquo;s no problem at all just using &lt;code&gt;dbSendStatement&lt;/code&gt; with complex queries. I&amp;rsquo;ve fallen into a pattern I really like of writing temporary tables (with &lt;code&gt;dplyr::copy_to&lt;/code&gt; because it&amp;rsquo;s clean in a pipeline) and then executing complex SQL with &lt;code&gt;dbSendStatement&lt;/code&gt;. In the future, I might be inclined to make these database functions, but either way this change has been great. I feel more confident than ever working with databases and R (my two favorite places to be) and I have been able to simplify a whole lot of code that involved passing around text files (and boy do I hate the type inference and other madness that can happen with CSVs. Oy.).&lt;/p&gt;

&lt;h2 id=&#34;purrr&#34;&gt;purrr&lt;/h2&gt;

&lt;p&gt;This is the year that &lt;code&gt;purrr&lt;/code&gt; not only clicked, but became my preferred way to write code. Where there was &lt;code&gt;apply&lt;/code&gt;, now there was &lt;code&gt;purrr&lt;/code&gt;. Everything started to look like a list. I&amp;rsquo;m still only scratching the surface here, but I love code like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;locations %&amp;gt;%
  filter(code %in% enrollment$locations) %$%
  code %&amp;gt;%
  walk(function(x) render(input = &#39;schprofiles.Rmd&#39;,
                          html_document(theme = NULL,
                                        template = NULL,
                                        self_contained = FALSE,
                                        css = &#39;static/styles.css&#39;,
                                        lib_dir = &#39;cache/demo/output/static/&#39;,
                                        includes = includes(&#39;fonts.html&#39;)),
                          params = list(school_code = x),
                          output_file = paste0(x,&#39;.html&#39;),
                          output_dir = &amp;quot;cache/demo/output/&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It&amp;rsquo;s a simple way to run through all of the &lt;code&gt;locations&lt;/code&gt; (a &lt;code&gt;data.frame&lt;/code&gt; with columns &lt;code&gt;code&lt;/code&gt; and &lt;code&gt;name&lt;/code&gt;) and render an HTML-based profile of each school (defined by having student enrollment). &lt;code&gt;walk&lt;/code&gt; is beautiful, and so is &lt;code&gt;purrr&lt;/code&gt;. I mean, who does need to do &lt;code&gt;map(., mutate_if, is.numeric, as.character)&lt;/code&gt; 10 times a day?&lt;/p&gt;

&lt;h2 id=&#34;2018-r-goals&#34;&gt;2018 R Goals&lt;/h2&gt;

&lt;p&gt;One thing that&amp;rsquo;s bittersweet is that 2017 is probably the last year in a long time that writing code is the main thing my every day job is about. With increased responsibility and the growth of my employees, I find myself reviewing code a lot more than writing it, and sometimes not even that. With that in mind, I have a few goals for 2018 that I hope will keep the part of me that loves R engaged.&lt;/p&gt;

&lt;p&gt;First, I want to start writing command line utilities using R. I know almost nothing beyond &lt;code&gt;Rscript -e&lt;/code&gt; or &lt;code&gt;./script.sh&lt;/code&gt; when it comes to writing a CLI. But there are all kinds of tasks I do every day that could be written as small command line scripts. Plus, my favorite part of package authoring is writing interfaces for other people to use. How do I expect someone to want to use R and reason about a problem I&amp;rsquo;m helping to solve? It&amp;rsquo;s no wonder that I work on product every day with this interest. So I figure one way to keep engaged in R is to learn how to design command line utilities in R and get good at it. Rather than write R code purely intended to be called and used from R, my R code is going to get an interface this year.&lt;/p&gt;

&lt;p&gt;Like every year, I&amp;rsquo;d like to keep up with this blog. I never do, but this year I had a lot of encouraging signs. I actually got considerable attention for every R-related post (high hundreds of views), so I think it&amp;rsquo;s time to lean into that. I&amp;rsquo;m hoping to write one R related post each week. I think the focus will help me have some chance of pulling this off. Since I also want to keep my R chops alive while I move further and further away from day to day programming responsibilities, it should be a two birds with one stone scenario. One major thing I haven&amp;rsquo;t decided&amp;ndash; do I want to submit to r-bloggers? I&amp;rsquo;m sure it&amp;rsquo;d be a huge source of traffic, but I find it frustrating to have to click through from my RSS reader of choice when finding things there.&lt;/p&gt;

&lt;p&gt;Lastly, I&amp;rsquo;d like to start to understand the internals of a core package I use every day. I haven&amp;rsquo;t decided what that&amp;rsquo;ll be. Maybe it&amp;rsquo;ll be something really fundamental like &lt;code&gt;dplyr&lt;/code&gt;, &lt;code&gt;DBI&lt;/code&gt;, or &lt;code&gt;ggplot2&lt;/code&gt;. Maybe it&amp;rsquo;ll be something &amp;ldquo;simpler&amp;rdquo;. But I use a lot more R code than I read. And one thing I&amp;rsquo;ve learned every time I&amp;rsquo;ve forced myself to dig in is that I understand more R than I thought and also that reading code is one of the best ways to learn more. I want to do at least one deep study that advances my sense of self-R-worth. Maybe I&amp;rsquo;ll even have to take the time to learn a little C++ and understand how Rccp is being used to change the R world.&lt;/p&gt;

&lt;h2 id=&#34;special-thanks&#34;&gt;Special Thanks&lt;/h2&gt;

&lt;p&gt;The #rstats world on Twitter has been the only reason I can get on that service anymore. It&amp;rsquo;s a great and positive place where I learn a ton and I really appreciate feeling like there is a family of nerds out there talking about stuff that I feel like no one should care about. My tweets are mostly stupid musings that come to me and retweeting enraging political stuff in the dumpster fire that is Trump&amp;rsquo;s America, so I&amp;rsquo;m always surprised and appreciative that anyone follows me. It&amp;rsquo;s so refreshing to get away from that and just read #rstats. So thank you for inspiring me and teaching me and being a fun place to be.&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:lateral&#34;&gt;I let out quite the &amp;ldquo;fuck yea!&amp;rdquo; when I got that two-common-table-expression, two joins with one lateral join in an upsert query to work.
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:lateral&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Functions as Arguments in R</title>
      <link>/2017/05/functions-as-arguments-in-r/</link>
      <pubDate>Mon, 29 May 2017 00:00:00 +0000</pubDate>
      
      <guid>/2017/05/functions-as-arguments-in-r/</guid>
      <description>&lt;p&gt;Sometimes, silly small things about code I write just delight me. There are &lt;a href=&#34;http://www.alexejgossmann.com/benchmarking_r/&#34;&gt;lots of ways to time things&lt;/a&gt; in R. &lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:tictoc&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:tictoc&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; Tools like &lt;code&gt;microbenchmark&lt;/code&gt; are great for profiling code, but what I do all the time is log how long database queries that are scheduled to run each night are taking.&lt;/p&gt;

&lt;p&gt;It is really easy to use calls to &lt;code&gt;Sys.time&lt;/code&gt; and &lt;code&gt;difftime&lt;/code&gt; when working interactively, but I didn&amp;rsquo;t want to pepper all of my code with the same log statements all over the place. So instead, I wrote a function.&lt;/p&gt;

&lt;p&gt;Almost all of &lt;code&gt;timing&lt;/code&gt; is straightforward to even a novice R user. I record what time it is using &lt;code&gt;Sys.time&lt;/code&gt;, do a little formatting work to make things look the way I want for reading logs, and pass in an optional message.&lt;/p&gt;

&lt;p&gt;The form of &lt;code&gt;timing&lt;/code&gt; was easy for me to sketch out: &lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:realize&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:realize&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;timing &amp;lt;- function(STUFF, msg = &#39;&#39;) {
  start_time &amp;lt;- format(Sys.time(), &#39;%a %b %d %X %Y&#39;)
  start_msg &amp;lt;- paste(&#39;Starting&#39;, msg,
                     &#39;at:&#39;, start_time, &#39;\n&#39;)
  cat(start_msg)
  # Call my function here
  end_time &amp;lt;- format(Sys.time(), &#39;%a %b %d %X %Y&#39;)
  end_msg &amp;lt;- paste(&#39;Completed&#39;, &#39;at:&#39;, end_time, &#39;\n&#39;)
  cat(end_msg)
  elapsed &amp;lt;- difftime(as.POSIXlt(end_time, format = &#39;%a %b %d %X %Y&#39;),
                      as.POSIXlt(start_time, format = &#39;%a %b %d %X %Y&#39;))
  cat(&#39;Elapsed Time: &#39;, format(unclass(elapsed), digits = getOption(&#39;digits&#39;)),
      &#39; &#39;, attr(elapsed, &#39;units&#39;), &#39;\n\n\n&#39;, sep = &#39;&#39;)
  result
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The thing I needed to learn when I wrote &lt;code&gt;timing&lt;/code&gt; a few years back was how to fill in &lt;code&gt;STUFF&lt;/code&gt; and &lt;code&gt;# Call my function here&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Did you know that you can pass a function as an argument in another function in R? I had been using &lt;code&gt;*apply&lt;/code&gt; with its &lt;code&gt;FUN&lt;/code&gt; argument all over the place, but never &lt;em&gt;really&lt;/em&gt; thought about it until I wrote &lt;code&gt;timing&lt;/code&gt;. Of course in R you can pass a function name, and I even know how to pass arguments to that function&amp;ndash; just like &lt;code&gt;apply&lt;/code&gt;, just declare a function with the magical &lt;code&gt;...&lt;/code&gt; and pass that along to the fucntion being passed in.&lt;/p&gt;

&lt;p&gt;So from there, it was clear to see how I&amp;rsquo;d want my function declartion to look. It would definitely have the form &lt;code&gt;function(f, ..., msg = &#39;&#39;)&lt;/code&gt;, where &lt;code&gt;f&lt;/code&gt; was some function and &lt;code&gt;...&lt;/code&gt; were the arguments for that function. What I didn&amp;rsquo;t know was how to properly call that function. Normally, I&amp;rsquo;d write something like &lt;code&gt;mean(...)&lt;/code&gt;, but I don&amp;rsquo;t know what &lt;code&gt;f&lt;/code&gt; is in this case!&lt;/p&gt;

&lt;p&gt;As it turns out, the first thing I tried worked, much to my surprise. R actually makes this super easy&amp;ndash; you can just write &lt;code&gt;f(...)&lt;/code&gt;, and &lt;code&gt;f&lt;/code&gt; will be replaced with whatever the argument is to &lt;code&gt;f&lt;/code&gt;! This just tickles me. It&amp;rsquo;s stupid elegant to my eyes.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;timing &amp;lt;- function(f, ..., msg = &#39;&#39;) {
  start_time &amp;lt;- format(Sys.time(), &#39;%a %b %d %X %Y&#39;)
  start_msg &amp;lt;- paste(&#39;Starting&#39;, msg,
                     &#39;at:&#39;, start_time, &#39;\n&#39;)
  cat(start_msg)
  x &amp;lt;- f(...)
  end_time &amp;lt;- format(Sys.time(), &#39;%a %b %d %X %Y&#39;)
  end_msg &amp;lt;- paste(&#39;Completed&#39;, &#39;at:&#39;, end_time, &#39;\n&#39;)
  cat(end_msg)
  elapsed &amp;lt;- difftime(as.POSIXlt(end_time, format = &#39;%a %b %d %X %Y&#39;),
                      as.POSIXlt(start_time, format = &#39;%a %b %d %X %Y&#39;))
  cat(&#39;Elapsed Time: &#39;, format(unclass(elapsed), digits = getOption(&#39;digits&#39;)),
      &#39; &#39;, attr(elapsed, &#39;units&#39;), &#39;\n\n\n&#39;, sep = &#39;&#39;)
  x
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now I can monitor the run time of any function by wrapping it in &lt;code&gt;timing&lt;/code&gt;. For example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;timing(read.csv, &#39;my_big_file.csv&#39;, header = TRUE, stringsAsFactors = FALSE)`
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And here&amp;rsquo;s an example of the output from a job that ran this morning:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-plaintext&#34;&gt;Starting queries/accounts.sql at: Mon May 29 06:24:12 AM 2017
Completed at: Mon May 29 06:24:41 AM 2017
Elapsed Time: 29 secs
&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:tictoc&#34;&gt;&lt;code&gt;tictoc&lt;/code&gt; is new to me, but I&amp;rsquo;m glad it is. I would have probably never written the code in this post if it existed, and then I would be sad and this blog post wouldn&amp;rsquo;t exist.
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:tictoc&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:realize&#34;&gt;Yes, I realize that having the calls to &lt;code&gt;paste&lt;/code&gt; and &lt;code&gt;cat&lt;/code&gt; after setting &lt;code&gt;start_time&lt;/code&gt; technically add those calls to the stack of stuff being timed and both of those things could occur after function execution. For my purposes, the timing does not have to be nearly that precise and the timing of those functions will contribute virtually nothing. So I opted for what I think is the clearer style of code as well as ensuring that live monitoring would inform me of what&amp;rsquo;s currently running.
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:realize&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Labeling Data with purrr</title>
      <link>/2017/03/labeling-data-with-purrr/</link>
      <pubDate>Fri, 03 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>/2017/03/labeling-data-with-purrr/</guid>
      <description>&lt;p&gt;Here&amp;rsquo;s a fun common task. I have a data set that has a bunch of codes like:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;Name&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Abbr&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Code&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Alabama&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;AL&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;01&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Alaska&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;AK&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;02&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Arizona&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;AZ&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;04&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Arkansas&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;AR&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;05&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;California&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;CA&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;06&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Colorado&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;CO&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;08&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Connecticut&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;CT&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;09&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Delaware&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;DE&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;10&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;All of your data is labeled with the &lt;code&gt;code&lt;/code&gt; value. In this case, you want to do a &lt;code&gt;join&lt;/code&gt; so that you can use the actual names because it&amp;rsquo;s 2017 and we&amp;rsquo;re not animals.&lt;/p&gt;

&lt;p&gt;But what if your data, like the accounting data we deal with at &lt;a href=&#34;http://www.allovue.com&#34;&gt;Allovue&lt;/a&gt;, has lots of code fields. You probably either have one table that contains all of the look ups in &amp;ldquo;long&amp;rdquo; format, where there is a column that represents which column in your data the code is for like this:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;code&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;type&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;name&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;01&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;fips&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;Alabama&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;02&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;fips&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;Alaska&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Alternatively, you may have a lookup table per data element (so one called fips, one called account, one called function, etc).&lt;/p&gt;

&lt;p&gt;I bet most folks do the following in this scenario:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;account &amp;lt;- left_join(account, account_lookup)
account &amp;lt;- left_join(account, fips)

## Maybe this instead ##
account %&amp;lt;&amp;gt;%
  left_join(account_lookup) %&amp;gt;%
  left_join(fips)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I want to encourage you to do this a little different using &lt;code&gt;purrr&lt;/code&gt;. Here&amp;rsquo;s some annotated code that uses &lt;code&gt;reduce_right&lt;/code&gt; to make magic.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# Load a directory of .csv files that has each of the lookup tables
lookups &amp;lt;- map(dir(&#39;data/lookups&#39;), read.csv, stringsAsFactors = FALSE)
# Alternatively if you have a single lookup table with code_type as your
# data attribute you&#39;re looking up
# lookups &amp;lt;- split(lookups, code_type)
lookups$real_data &amp;lt;- read.csv(&#39;data/real_data.csv&#39;, 
                              stringsAsFactors = FALSE)
real_data &amp;lt;- reduce_right(lookups, left_join)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Boom, now you went from data with attributes like &lt;code&gt;funds_code&lt;/code&gt;, &lt;code&gt;function_code&lt;/code&gt;, &lt;code&gt;state_code&lt;/code&gt; to data that also has &lt;code&gt;funds_name&lt;/code&gt;, &lt;code&gt;function_name&lt;/code&gt;, &lt;code&gt;state_name&lt;/code&gt;&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:namingconventions&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:namingconventions&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;. What&amp;rsquo;s great is that this same code can be reused no matter how many fields require a hookup. I&amp;rsquo;m oftent dealing with accounting data where the accounts are defined by a different number of data fields, but my code doesn&amp;rsquo;t care at all.&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:namingconventions&#34;&gt;My recommendation is to use consistent naming conventions like &lt;code&gt;_code&lt;/code&gt; and &lt;code&gt;_name&lt;/code&gt; so that knowing how to do the lookups is really straightforward. This is not unlike the convention with Microsoft SQL where the primary key of a table is named &lt;code&gt;Id&lt;/code&gt; and a foreign key to that table is named &lt;code&gt;TableNameId&lt;/code&gt;. Anything that helps you figure out how to put things together without thinking is worth it.
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:namingconventions&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Contributing to vegalite</title>
      <link>/2017/03/contributing-to-vegalite/</link>
      <pubDate>Thu, 02 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>/2017/03/contributing-to-vegalite/</guid>
      <description>&lt;p&gt;One of my goals for 2017 is to contribute more to the R open source community. At the beginning of last year, I spent a little time helping to refactor &lt;a href=&#34;https://www.github.com/leeper/rio&#34;&gt;rio&lt;/a&gt;. It was one of the more rewarding things I did in all of 2016. It wasn&amp;rsquo;t a ton of work, and I feel like I gained a lot of confidence in writing R packages and using S3 methods. I wrote code that R users download and use thousands of times a month.&lt;/p&gt;

&lt;p&gt;I have been on the lookout for a Javascript powered interactive charting library since &lt;code&gt;ggvis&lt;/code&gt; was announced in 2014. But &lt;code&gt;ggvis&lt;/code&gt; seems to have stalled out in favor of other projects (for now) and the evolution of &lt;code&gt;rCharts&lt;/code&gt; into &lt;code&gt;htmlwidgets&lt;/code&gt; left me feeling like there were far too many options and no clear choices.&lt;/p&gt;

&lt;p&gt;What I was looking for was a plotting library to make clean, attractive graphics with tool tips that came with clear documentation and virtually no knowledge of Javascript required. Frankly, all of the &lt;code&gt;htmlwidgets&lt;/code&gt; stuff was very intimidating. From my vantage point skimming blog posts and watching stuff come by on Twitter, &lt;code&gt;htmlwidgets&lt;/code&gt;-based projects all felt very much directed at Javascript polyglots.&lt;/p&gt;

&lt;p&gt;Vega and Vega-Lite had a lot of the qualities I sought in a plotting library. Reading and writing JSON is very accessible compared to learning Javascript, especially with R&amp;rsquo;s excellent translation from lists to JSON. And although I know almost no Javascript, I found in both Vega and Vega-Lite easy to understand documents that felt a lot like building grammar of graphics &lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:thegg&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:thegg&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; plots.&lt;/p&gt;

&lt;p&gt;So I decided to take the plunge&amp;ndash; there was a &lt;code&gt;vegalite&lt;/code&gt; &lt;a href=&#34;https://github.com/hrbrmstr/vegalite&#34;&gt;package&lt;/a&gt; and the examples didn&amp;rsquo;t look so bad. It was time to use my first &lt;code&gt;htmlwidgets&lt;/code&gt; package.&lt;/p&gt;

&lt;p&gt;Things went great. I had some simple data and I wanted to make a bar chart. I wrote:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;vegalite() %&amp;gt;%
add_data(my_df) %&amp;gt;%
encode_x(&#39;schools&#39;, type = &#39;nominal&#39;) %&amp;gt;%
encode_y(&#39;per_pupil&#39;, type = &#39;quantitative&#39;) %&amp;gt;%
mark_bar()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A bar chart was made! But then I wanted to use the font Lato, which is what we use at &lt;a href=&#34;http://www.allovue.com&#34;&gt;Allovue&lt;/a&gt;. No worries, Vega-Lite has a property called &lt;code&gt;titleFont&lt;/code&gt; for axes. So I went to do:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;vegalite() %&amp;gt;%
add_data(my_df) %&amp;gt;%
encode_x(&#39;schools&#39;, type = &#39;nominal&#39;) %&amp;gt;%
encode_y(&#39;per_pupil&#39;, type = &#39;quantitative&#39;) %&amp;gt;%
mark_bar() %&amp;gt;%
axis_x(titleFont = &#39;Lato&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Bummer. It didn&amp;rsquo;t work. I almost stopped there, experiment over. But then I remembered my goal and I thought, maybe I need to learn to contribute to a package that is an &lt;code&gt;htmlwidget&lt;/code&gt; and not simply use an &lt;code&gt;htmlwidget&lt;/code&gt;-based package. I should at least &lt;em&gt;look&lt;/em&gt; at the code.&lt;/p&gt;

&lt;p&gt;What I found surprised me. Under the hood, all the R package does is build up lists. It makes so much sense&amp;ndash; pass JSON to Javascript to process and do what&amp;rsquo;s needed.&lt;/p&gt;

&lt;p&gt;So it turned out, &lt;code&gt;vegalite&lt;/code&gt; for R was a bit behind the current version of &lt;code&gt;vegalite&lt;/code&gt; and didn&amp;rsquo;t have the &lt;code&gt;titleFont&lt;/code&gt; property yet. And with that, I made my &lt;a href=&#34;https://github.com/hrbrmstr/vegalite/commit/8f4d4db057985bac4fc8c5743780b4746dd56c56&#34;&gt;first commit&lt;/a&gt;. All I had to do was update the function definition and add the new arguments to the axis data like so:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;if (!is.null(titleFont))    vl$x$encoding[[chnl]]$axis$titleFont &amp;lt;- titleFont
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;But why stop there? I wanted to update all of &lt;code&gt;vegalite&lt;/code&gt; to use the newest available arguments. Doing so looked like a huge pain though. The original package author made these great functions like &lt;code&gt;axis_x&lt;/code&gt; and &lt;code&gt;axis_y&lt;/code&gt;. They both had the same arguments, the only difference was the &amp;ldquo;channel&amp;rdquo; was preset as &lt;code&gt;x&lt;/code&gt; or &lt;code&gt;y&lt;/code&gt; based on which function was called. Problem was that all of the arguments, all of the assignments, and all of the documentation had to be copied twice. It was worse with &lt;code&gt;encode&lt;/code&gt; and &lt;code&gt;scale&lt;/code&gt; which had many, many functions that are similar or identical in their &amp;ldquo;signature&amp;rdquo;. No wonder the package was missing so many Vega-Lite features&amp;ndash; they were a total pain to add.&lt;/p&gt;

&lt;p&gt;So as a final step, I decided I would do a light refactor across the whole package. In each of the core functions, like &lt;code&gt;encode&lt;/code&gt; and &lt;code&gt;axis&lt;/code&gt;, I would write a single generic function like &lt;code&gt;encode_vl()&lt;/code&gt; that would hold all of the possible arguments for the &lt;a href=&#34;https://vega.github.io/vega-lite/docs/encoding.html&#34;&gt;encoding portion&lt;/a&gt; of Vega-Lite. Then the specific functions like &lt;code&gt;encode_x&lt;/code&gt; could become wrapper functions that internally call &lt;code&gt;encode_vl&lt;/code&gt; like so:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;encode_x &amp;lt;- function(vl, ...) {
  vl &amp;lt;- encode_vl(vl, chnl = &amp;quot;x&amp;quot;, ...)
  vl
}

encode_y &amp;lt;- function(vl, ...) {
  vl &amp;lt;- encode_vl(vl, chnl =&amp;quot;y&amp;quot;, ...)
  vl
}

encode_color &amp;lt;- function(vl, ...) {
  vl &amp;lt;- encode_vl(vl, chnl = &amp;quot;color&amp;quot;, ...)
  vl
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now, in order to update the documentation and the arguments for &lt;code&gt;encoding&lt;/code&gt;, I just have to update the &lt;code&gt;encode_vl&lt;/code&gt; function. It&amp;rsquo;s a really nice demonstration, in my opinion, of the power of R&amp;rsquo;s &lt;code&gt;...&lt;/code&gt; syntax. All of the wrapper functions can just pass whatever additional arguments the caller wants to &lt;code&gt;encode_vl&lt;/code&gt; without having to explicitly list them each time.&lt;/p&gt;

&lt;p&gt;This greatly reduced duplication in the code and made it far easier to update &lt;code&gt;vegalite&lt;/code&gt; to the newest version of Vega-Lite, which I also decided to do.&lt;/p&gt;

&lt;p&gt;Now Vega-Lite itself is embarking on a 2.0 release that I have a feeling will have some pretty big changes in store. I&amp;rsquo;m not sure if I&amp;rsquo;ll be the one to update &lt;code&gt;vegalite&lt;/code&gt;&amp;ndash; in the end, I think that Vega-Lite is too simple for the visualizations I need to do&amp;ndash; but I am certain whoever does the update will have a much easier go of it now than they would have just over a month ago.&lt;/p&gt;

&lt;p&gt;Thanks to &lt;a href=&#34;https://github.com/hrbrmstr&#34;&gt;Bob Rudis&lt;/a&gt; for making &lt;code&gt;vegalite&lt;/code&gt; and giving me free range after a couple of commits to go hog-wild on his package!&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:thegg&#34;&gt;The &lt;code&gt;gg&lt;/code&gt; in &lt;code&gt;ggplot2&lt;/code&gt;.
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:thegg&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>News on Assertions in R</title>
      <link>/2015/07/news-on-assertions-in-r/</link>
      <pubDate>Sun, 05 Jul 2015 00:00:00 +0000</pubDate>
      
      <guid>/2015/07/news-on-assertions-in-r/</guid>
      <description>&lt;p&gt;How many times have you written R functions that start with a bunch of code that looks like this?&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;my_funct &amp;lt;- function(dob, enddate = &amp;quot;2015-07-05&amp;quot;){
if (!inherits(dob, &amp;quot;Date&amp;quot;) | !inherits(enddate, &amp;quot;Date&amp;quot;)){
    stop(&amp;quot;Both dob and enddate must be Date class objects&amp;quot;)
  } 
...
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Because R was designed to be interactive, it is incredibly tolerant to bad user input. Functions are not &lt;em&gt;type safe&lt;/em&gt;, meaning function arguments do not have to conform to specified data types. But most of my R code is not run interactively. I have to trust my code to run on servers on schedules or on demand as a part of production systems. So I find myself frequently writing code like the above&amp;ndash; manually writing type checks for safety.&lt;/p&gt;

&lt;p&gt;There has been some great action in the R community around &lt;em&gt;assertive programming&lt;/em&gt;, as you can see in the link. My favorite development, by far, are type-safe functions in the &lt;a href=&#34;https://github.com/smbache/ensurer&#34;&gt;ensurer package&lt;/a&gt;. The above function definition can now be written like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;my_funct &amp;lt;- function_(dob ~ Date, enddate ~ Date: as.Date(&amp;quot;2015-07-05&amp;quot;), {
  ...
})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;All the type-checking is done.&lt;/p&gt;

&lt;p&gt;I really like the reuse of the formula notation &lt;code&gt;~&lt;/code&gt; and the use of &lt;code&gt;:&lt;/code&gt; to indicate default values.&lt;/p&gt;

&lt;p&gt;Along with packages like &lt;a href=&#34;https://github.com/hadley/testthat&#34;&gt;testthat&lt;/a&gt;, R is really growing up and modernizing.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
