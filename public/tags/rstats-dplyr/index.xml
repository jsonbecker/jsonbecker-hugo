<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Rstats Dplyr on JSONBecker</title>
    <link>http://www.json.blog/tags/rstats-dplyr/</link>
    <description>Recent content in Rstats Dplyr on JSONBecker</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 18 May 2017 00:00:00 +0000</lastBuildDate>
    
        <atom:link href="http://www.json.blog/tags/rstats-dplyr/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Making Sense of dplyr 0.6</title>
      <link>http://www.json.blog/2017/05/making-sense-of-dplyr-0.6/</link>
      <pubDate>Thu, 18 May 2017 00:00:00 +0000</pubDate>
      
      <guid>http://www.json.blog/2017/05/making-sense-of-dplyr-0.6/</guid>
      <description>

&lt;p&gt;Non-standard evaluation is one of R&amp;rsquo;s best features, and also one of it&amp;rsquo;s most perplexing. Recently I have been making good use of &lt;code&gt;wrapr::let&lt;/code&gt; to allow me to write reusable functions without a lot of assumptions about my data. For example, let&amp;rsquo;s say I always want to &lt;code&gt;group_by&lt;/code&gt; schools when adding up dollars spent, but that sometimes my data calls what is conceptually a school &lt;code&gt;schools&lt;/code&gt;, &lt;code&gt;school&lt;/code&gt;, &lt;code&gt;location&lt;/code&gt;, &lt;code&gt;cost_center&lt;/code&gt;, &lt;code&gt;Loc.Name&lt;/code&gt;, etc. What I have been doing is storing a set of parameters in a &lt;code&gt;list&lt;/code&gt; that mapped the actual names in my data to consistent names I want to use in my code. Sometimes that comes from using &lt;code&gt;params&lt;/code&gt; in an Rmd file. So the top of my file may say something like:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;params:
    school: &amp;quot;locations&amp;quot;
    amount: &amp;quot;dollars&amp;quot;
    enrollment: n
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In my code, I may want to write a chain like&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;create_per_pupil &amp;lt;- . %&amp;gt;%
                    group_by(school) %&amp;gt;%
                    summarize(per_pupil = sum(amount) / n)
pp &amp;lt;- district_data %&amp;gt;%
      create_per_pupil
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Only my problem is that &lt;code&gt;school&lt;/code&gt; isn&amp;rsquo;t always &lt;code&gt;school&lt;/code&gt;. In this toy case, you could use &lt;code&gt;group_by_(params$school)&lt;/code&gt;, but it&amp;rsquo;s pretty easy to run into limitations with the &lt;code&gt;_&lt;/code&gt; functions in &lt;code&gt;dplyr&lt;/code&gt; when writing functions.&lt;/p&gt;

&lt;p&gt;Using &lt;code&gt;wrapr::let&lt;/code&gt;, I can easily use the code above:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;let(alias = params, {
    create_per_pupil &amp;lt;- . %&amp;gt;%
                        group_by(school) %&amp;gt;%
                        summarize(per_pupil = sum(amount)/n)
})

pp &amp;lt;- district_data %&amp;gt;%
      create_per_pupil
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The core of &lt;code&gt;wrapr::let&lt;/code&gt; is really scary.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;body &amp;lt;- strexpr
for (ni in names(alias)) {
    value &amp;lt;- as.character(alias[[ni]])
    if (ni != value) {
        pattern &amp;lt;- paste0(&amp;quot;\\b&amp;quot;, ni, &amp;quot;\\b&amp;quot;)
        body &amp;lt;- gsub(pattern, value, body)
    }
}
parse(text = body)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Basically let is holidng onto the code block contained within it, iterating over the list of key-value pairs that are provided, and then runs a &lt;code&gt;gsub&lt;/code&gt; on word boundaries to replace all instances of the list names with their values. Yikes.&lt;/p&gt;

&lt;p&gt;This works, I use it all over, but I have never felt confident about it.&lt;/p&gt;

&lt;h2 id=&#34;the-new-world-of-tidyeval&#34;&gt;The New World of tidyeval&lt;/h2&gt;

&lt;p&gt;The release of dplyr 0.6 along with tidyeval brings wtih it a ton of features to making programming over dplyr functions far better supported. I am going to &lt;a href=&#34;http://dplyr.tidyverse.org/articles/programming.html&#34;&gt;read this page&lt;/a&gt; by Hadley Wickham at least 100 times. There are all kinds of new goodies (&lt;code&gt;!!!&lt;/code&gt; looks amazing).&lt;/p&gt;

&lt;p&gt;So how would I re-write the chain above sans &lt;code&gt;let&lt;/code&gt;?&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;create_per_pupil &amp;lt;- . %&amp;gt;%
                    group_by(!!sym(school)) %&amp;gt;%
                    summarize(per_pupil = sum(amount)/n)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If I understand &lt;code&gt;tidyeval&lt;/code&gt;, then this is what&amp;rsquo;s going on.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;sym&lt;/code&gt; evaluates &lt;code&gt;school&lt;/code&gt; and makes the result a &lt;code&gt;symbol&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;and &lt;code&gt;!!&lt;/code&gt; says, roughly &amp;ldquo;evaluate that symbol now&amp;rdquo;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This way with &lt;code&gt;params$school&lt;/code&gt; having the value &lt;code&gt;&amp;quot;school_name&amp;quot;&lt;/code&gt;, &lt;code&gt;sym(school)&lt;/code&gt; creates evaulates that to &lt;code&gt;&amp;quot;school_name&amp;quot;&lt;/code&gt; and then makes it an unquoted symbol &lt;code&gt;school_name&lt;/code&gt;. Then &lt;code&gt;!!&lt;/code&gt; tells R &amp;ldquo;You can evaluate this next thing in place as it is.&amp;rdquo;&lt;/p&gt;

&lt;p&gt;I originally wrote this post trying to understand &lt;code&gt;enquo&lt;/code&gt;, but I never got it to work right and it makes no sense to me yet. What&amp;rsquo;s great is that &lt;code&gt;rlang::sym&lt;/code&gt; and &lt;code&gt;rlang::syms&lt;/code&gt; with &lt;code&gt;!!&lt;/code&gt; and &lt;code&gt;!!!&lt;/code&gt; respectively work really well so far. There is definitely less flexibility&amp;ndash; with the full on &lt;code&gt;quosure&lt;/code&gt; stuff you can have very complex evaluations. But I&amp;rsquo;m mostly worried about having very generic names for my data so &lt;code&gt;sym&lt;/code&gt; and &lt;code&gt;syms&lt;/code&gt; seems to work great.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
